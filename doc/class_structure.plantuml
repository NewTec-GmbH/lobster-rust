@startuml lobster-rust-classes

skinparam linetype ortho

package ra_ap_syntax {
    enum SyntaxElement {
        Node: SyntaxNode
        Token: SyntaxToken
    }

    class SyntaxNode {}
    class SyntaxToken {}
}

note top of ra_ap_syntax
From the rust-analyzer crate ra_ap_syntax.\nrust-analyzer code is used to parse the syntax tree from the soure file.
end note

note left of SyntaxElement
Wrapper for either a SyntaxNode or a SyntaxToken.
end note

SyntaxElement *-- SyntaxNode
SyntaxElement *-- SyntaxToken

interface Searchable {
    get_child_kind()
    get_children_kind()
    get_tokens_kind()
}

SyntaxElement .right.|> Searchable
SyntaxNode .right.|> Searchable

RustVisitor .. Searchable

interface Visitable {
    {abstract} visit(visitor: Visitor)
}

note bottom of Visitable
Visitable defines an interface that allows any struct implementing the Visitor trait to traverse the implementing struct.

Implementing Visitable includes defining how the node_enter(), node_exit() and token_visit() functions are applied to the struct.
end note

SyntaxElement ..|> Visitable
SyntaxNode ..|> Visitable
SyntaxToken ..|> Visitable



interface Visitor {
    {abstract} node_enter(node: SyntaxNode)
    {abstract} node_exit(node: SyntaxNode)
    {abstract} token_visit(token: SyntaxToken)
    {abstract} travel(root: SyntaxNode)
}

Visitable .right. Visitor

class RustVisitor {
    filepath: String
    default_context: String
    vdata: VisitorData
    module_visitors: RustVisitor
    node_enter(node: SyntaxNode)
    node_exit(node: SyntaxNode)
    token_visit(token: SyntaxToken)
    travel(root: SyntaxNode)
}

note top of RustVisitor
The RustVisitor traverses the SyntaxTree via the travel() method.

Its node_enter(), node_exit() and token_visit() produce RustTraceableNodes,
depending on the kind of SyntaxNodes and SyntaxTokens encountered in the tree.
end note

RustVisitor ..|> Visitor
RustVisitor o-- "*" RustVisitor

class VisitorData {
    ws_data: WhitespaceData
    node_stack: RustTraceableNode
}

note top of VisitorData
The node_stack is used to provide context information for nodes being parsed.
It also allows building of a new trace tree of RustTraceableNodes by appending finished nodes as children of their parents.
end note

RustVisitor *--- "1" VisitorData

class WhitespaceData {
    current_line: usize
    last_linebrk: usize
}

note top of WhitespaceData
Whitespace data is used to track data from visited whitespace tokens.
This allows calculating the specific location in the file for nodes and tokens being parsed.
end note

VisitorData *- "1" WhitespaceData
VisitorData o-- "*" RustTraceableNode

enum NodeKind {
    Module
    Struct
    Enum
    Trait
    Function
    Impl
}

class RustTraceableNode {
    name: String
    kind: NodeKind
    location: NodeLocation
    children[]: RustTraceableNode
    just[]: String
    refs[]: String
    impl_data: Option<ContextData>

    to_lobster()
    from_node(node: SyntaxNode) -> Self
    from_node_with_location(node: SyntaxNode, location: NodeLocation) -> Self
    append_child(child: RustTraceableNode)
    to_lobster(items: JsonValue[])
}

note right of RustTraceableNode
The RustTraceableNode holds all the information needed to produce data items in the lobster interchange formate.

The .to_lobster() method will convert it and its children into json items, depending on the NodeKind.
These json items can then form the data section of the lobster interchange format.
end note

RustTraceableNode o-- "*" RustTraceableNode

class ContextData {
    namespace: String,
    trait_imp: Option<String>
}

RustTraceableNode o--- "0..1" ContextData

enum NodeLocation {
    File: FileReference
    Github: GithubReference

    from(filename: String, line: Option<usize>, column: Option<usize>) -> Self
}

class FileReference {
    filename: String
    line: Option<usize>
    column: Option<usize>
    to_string() -> String
    set_line(usize)
    set_col(usize)
}

class GithubReference{}

NodeLocation *-- FileReference
NodeLocation *-- GithubReference

RustTraceableNode *-- "1" NodeKind
RustTraceableNode *-- "1" NodeLocation

package json {
    class JsonValue {
        from(RustTraceableNode) -> Self
        from(NodeLocation) -> Self
    }
}

RustTraceableNode .. JsonValue
NodeLocation .. JsonValue

note right of json
From json crate.
end note

@enduml